name: X → Slack (single job, fast)

on:
  schedule:
    - cron: "0 */3 * * *"
  workflow_dispatch:
    inputs:
      DEBUG:
        description: "Enable debug logs (1/0)"
        required: false
        default: "0"
      FORCE_POST:
        description: "Force post even if same id (1/0)"
        required: false
        default: "0"
      IGNORE_FIRST_POST:
        description: "On first run, save latest without posting (1/0)"
        required: false
        default: "0"

jobs:
  run:
    runs-on: ubuntu-latest

    # Tüm tetiklemeler için tek örnek koşsun
    concurrency:
      group: x-to-slack-${{ github.ref }}
      cancel-in-progress: false

    permissions:
      contents: write

    env:
      HANDLES: "replicate runwayml Alibaba_Wan higgsfield_ai veedstudio Kling_ai Hailuo_AI OpenAI fal ComfyUI freepik FishAudio midjourney elevenlabsio pika_labs krea_ai LumaLabsAI trymirage LeonardoAi deepseek_ai ltx_model runware hedra_labs argildotai topazlabs Adobe AdobeVideo creativecloud"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          # pip cache (hız)
          cache: "pip"

      # Playwright kurulumu (Chromium) + cache
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-ms-playwright-chromium-v1

      - name: Install deps (Playwright + Chromium)
        env:
          PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
        run: |
          pip install -r requirements.txt
          python -m playwright install chromium

      # Tüm handle’ları tek run’da sırayla çalıştır
      - name: Run scraper for all accounts (sequential)
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          DEBUG: ${{ inputs.DEBUG || '0' }}
          FORCE_POST: ${{ inputs.FORCE_POST || '0' }}
          IGNORE_FIRST_POST: ${{ inputs.IGNORE_FIRST_POST || '0' }}
        shell: bash
        run: |
          set -e
          for H in $HANDLES; do
            echo "=== Running for $H ==="
            # handle'a ait state'i yükle
            if [ -f "state-$H.json" ]; then cp "state-$H.json" state.json; else echo '{"last_id": null}' > state.json; fi
            X_HANDLE="$H" python scrape_x_to_slack.py
            # güncellenen state'i ayrı dosyaya yaz
            cp state.json "state-$H.json"
          done

      # Tüm state dosyalarını TEK commit ile push et (stabil)
      - name: Save & commit all states (single commit)
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        shell: bash
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add state-*.json || true

          # Uzaktan gelen son değişiklikleri al – yerel değişiklikleri otomatik stash’le
          git pull --rebase --autostash origin "$BRANCH_NAME" || true

          # Değişiklik varsa commit et
          git diff --cached --quiet && { echo "no changes"; exit 0; }
          git commit -m "[skip ci] save states"

          # Non-fast-forward olursa lease ile güvenli şekilde tekrar dene
          git push --force-with-lease origin HEAD:"$BRANCH_NAME"
